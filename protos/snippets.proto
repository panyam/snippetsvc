syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
option go_package = "github.com/panyam/snippets/protos";
package protos;

/**
 * The snippet service provides an isolated, secure, lightweight and scalable environment
 * for executing snippets and returning the output of the snippets.  The use case of this is
 * in embedding code samples in documentation and tutorials and ensure where a static site
 * generator can submit snippets to be excuted with different versions of code and ensure
 * snippets are upto date with the versions of software being documented.
 */
service SnippetService {
  /**
   * Creates a new environment for a snippet.
   */
  rpc CreateEnvironment(CreateEnvironmentRequest) returns (Environment) {}

  /**
   * Gets information about the given environments.
   */
  rpc GetEnvironments(GetEnvironmentsRequest) returns (GetEnvironmentsResponse) {}

  /**
   * Lists all environments.
   */
  rpc ListEnvironments(ListEnvironmentsRequest) returns (ListEnvironmentsResponse) {}

  /**
   * Updates all environments.
   */
  rpc UpdateEnvironment(UpdateEnvironmentRequest) returns (UpdateEnvironmentResponse) {}

  /**
   * Cancel/Deletes environments.
   */
  rpc DeleteEnvironment(DeleteEnvironmentRequest) returns (DeleteEnvironmentResponse) {}

  /**
   * Creates a new execution for a snippet.
   */
  rpc CreateExecution(CreateExecutionRequest) returns (CreateExecutionResponse) {}

  /**
   * Lists all executions.
   */
  rpc ListExecutions(ListExecutionsRequest) returns (ListExecutionsResponse) {}

  /**
   * Cancel/Deletes executions.
   */
  rpc DeleteExecutions(DeleteExecutionsRequest) returns (DeleteExecutionsResponse) {}

}

message Environment {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;
  string owner_id = 3;
  string id = 4;

  /**
   * name of the environment.
   */
  string name = 5;

  /**
   * The platform how the environment is created/managed etc.
   * eg Node
   */
  string platform = 7;
  repeated Package dependencies = 6;
}

message Package {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;
  string name = 3;
  string version = 4;
  string language = 5;
}

message Execution {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;

  // Owner requesting this environment
  string owner_id = 4;

  // ID of this execution
  string id = 5;

  // Code snippet being run
  string snippet = 6;

  // Output result of this execution
  // Since this is a URI it could be a file, a url or even
  // raw contents via string:// or bin:// or json://
  string output_uri = 7;

  // Status of the execution
  string status = 8;

  /**
   * The environment in which this execution is to be run
   */
  oneof env_details {
    // Run against a specific environment
    string env_id = 9;

    // Run in a environment that matches the given dependencies
    // This could result in a new environment just for this execution
    Environment new_env = 10;
  }
}

message CreateEnvironmentRequest {
  Environment environment = 1;
}

message GetEnvironmentsRequest {
  repeated string env_ids = 1;
}

message GetEnvironmentsResponse {
  map<string, Environment> environments = 1;
}

message ListEnvironmentsRequest {
  optional int32 offset = 1;
  optional int32 count = 2;
}

message ListEnvironmentsResponse {
  repeated Environment hosts = 1;
}

message UpdateEnvironmentRequest {
  Environment environment = 1;
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateEnvironmentResponse {
}

message DeleteEnvironmentRequest {
  string id = 1;
}

message DeleteEnvironmentResponse {
}

message CreateExecutionRequest {
}

message CreateExecutionResponse {
}

message DeleteExecutionsRequest {
}

message DeleteExecutionsResponse {
  repeated Execution executions = 1;
}

message ListExecutionsRequest {
}

message ListExecutionsResponse {
  repeated Execution executions = 1;
}
