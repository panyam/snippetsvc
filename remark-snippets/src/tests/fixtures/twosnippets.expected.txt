/*@jsxRuntime automatic @jsxImportSource react*/
function _createMdxContent(props) {
  const _components = Object.assign(
    {
      h2: "h2",
      pre: "pre",
      code: "code",
      p: "p",
      div: "div",
    },
    props.components
  );
  return (
    <>
      <_components.h2>{"Source 1"}</_components.h2>
      {"\n"}
      <_components.pre>
        <_components.code className="language-ts">
          {'console.log("Line 1")\n'}
        </_components.code>
      </_components.pre>
      {"\n"}
      <h4>
        <_components.p>{"Output"}</_components.p>
      </h4>
      {"\n"}
      {
        <_components.div className="snippetOutput" snippetId="1">
          <_components.pre>
            <_components.code className="hljs language-ts">{`Line 1
`}</_components.code>
          </_components.pre>
        </_components.div>
      }
      {"\n"}
      <_components.h2>{"Source 2"}</_components.h2>
      {"\n"}
      <_components.pre>
        <_components.code className="language-ts">
          {'console.log("Line 2")\n'}
        </_components.code>
      </_components.pre>
      {"\n"}
      <h4>
        <_components.p>{"Output"}</_components.p>
      </h4>
      {"\n"}
      {
        <_components.div className="snippetOutput" snippetId="2">
          <_components.pre>
            <_components.code className="hljs language-ts">{`Line 2
`}</_components.code>
          </_components.pre>
        </_components.div>
      }
    </>
  );
}
function MDXContent(props = {}) {
  const { wrapper: MDXLayout } = props.components || {};
  return MDXLayout ? (
    <MDXLayout {...props}>
      <_createMdxContent {...props} />
    </MDXLayout>
  ) : (
    _createMdxContent(props)
  );
}
export default MDXContent;
