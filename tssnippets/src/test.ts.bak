import { credentials, Metadata } from '@grpc/grpc-js'
import {
  CreateEnvironmentRequest,
  Environment,
  SnippetServiceClient
} from './snippets'
import { promisify } from 'util'
// import grpc from "grpc";

const client = new SnippetServiceClient(
  'localhost:7000',
  credentials.createInsecure(),
  {
    'grpc.keepalive_time_ms': 120000,
    'grpc.http2.min_time_between_pings_ms': 120000,
    'grpc.keepalive_timeout_ms': 20000,
    'grpc.http2.max_pings_without_data': 0,
    'grpc.keepalive_permit_without_calls': 1
  }
)

const p1 = {
  name: 'tlex' as string,
  version: '*' as string,
  language: 'ts' as string
}

const env = {
  ownerId: '1',
  id: '',
  name: 'tslex',
  platform: 'node',
  dependencies: [p1]
}

async function createEnv (
  param: CreateEnvironmentRequest,
  md: Metadata = new Metadata()
): Promise<Environment> {
  const func = client.createEnvironment.bind(client)
  return await promisify<CreateEnvironmentRequest, Metadata, Environment>(func)(
    param,
    md
  )
}

async function runner (): Promise<void> {
  try {
    const result = await createEnv({ environment: env })
    console.log('Env: ', result)
  } catch (err) {
    console.log('Error: ', err)
  }
}

runner()
